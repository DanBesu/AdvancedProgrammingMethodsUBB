
 >>> Program state: 
Execution stack: {
    bool a; int v; a = true; IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {-}
Out list: []

 >>> Program state: 
Execution stack: {
    bool a;
    int v; a = true; IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {-}
Out list: []

 >>> Program state: 
Execution stack: {
    int v; a = true; IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {
    a -> false
 }
Out list: []

 >>> Program state: 
Execution stack: {
    int v;
    a = true; IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {
    a -> false
 }
Out list: []

 >>> Program state: 
Execution stack: {
    a = true; IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {
    a -> false
    v -> 0 
 }
Out list: []

 >>> Program state: 
Execution stack: {
    a = true;
    IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {
    a -> false
    v -> 0 
 }
Out list: []

 >>> Program state: 
Execution stack: {
    IF(a) THEN(v = 2 ) ELSE(v = 3 )); print(v);
}
Symbols table: {
    a -> true
    v -> 0 
 }
Out list: []

 >>> Program state: 
Execution stack: {
    IF(a) THEN(v = 2 ) ELSE(v = 3 ));
    print(v);
}
Symbols table: {
    a -> true
    v -> 0 
 }
Out list: []

 >>> Program state: 
Execution stack: {
    v = 2 ;
    print(v);
}
Symbols table: {
    a -> true
    v -> 0 
 }
Out list: []

 >>> Program state: 
Execution stack: {
    print(v);
}
Symbols table: {
    a -> true
    v -> 2 
 }
Out list: []

 >>> Program state: 
Execution stack: {}
Symbols table: {
    a -> true
    v -> 2 
 }
Out list: [ 2 ]
