
 >>> Program state: 
Thread ID:0
Execution stack: {
    Ref(int) v; new(v, 20 ); Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {-}
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    Ref(int) v;
    new(v, 20 ); Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {-}
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    Ref(int) v;
    new(v, 20 ); Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {-}
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    Ref(int) v;
    new(v, 20 ); Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {-}
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    Ref(int) v;
    new(v, 20 ); Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {-}
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(v, 20 );
    Ref(Ref(int)) a; new(a, v); new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    v -> (0, int)
 }
Out list: []
File table: {-}
Heap: {-}

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }

 >>> Program state: 
Thread ID:0
Execution stack: {
    new(a, v);
    new(v, 30 ); print(read(read(a)));
}
Symbols table: {
    a -> (0, Ref(int))
    v -> (1, int)
 }
Out list: []
File table: {-}
Heap: {
    1 -> 20 
 }
